use winit::event::ModifiersState;
use winit::event::VirtualKeyCode;

#[rustfmt::skip]
pub fn convert(key: VirtualKeyCode, modifier: ModifiersState) -> String {
    let key_string = format!("{:?}", key);
    let mut shift_state = if modifier.shift() { "S-" } else { "" };
    let key_str = match key {
        VirtualKeyCode::Key1 => if !modifier.shift() { "1" } else { shift_state = ""; "!" }
        VirtualKeyCode::Key2 => if !modifier.shift() { "2" } else { shift_state = ""; "@" },
        VirtualKeyCode::Key3 => if !modifier.shift() { "3" } else { shift_state = ""; "#" },
        VirtualKeyCode::Key4 => if !modifier.shift() { "4" } else { shift_state = ""; "$" },
        VirtualKeyCode::Key5 => if !modifier.shift() { "5" } else { shift_state = ""; "%" },
        VirtualKeyCode::Key6 => if !modifier.shift() { "6" } else { shift_state = ""; "^" },
        VirtualKeyCode::Key7 => if !modifier.shift() { "7" } else { shift_state = ""; "&" },
        VirtualKeyCode::Key8 => if !modifier.shift() { "8" } else { shift_state = ""; "*" },
        VirtualKeyCode::Key9 => if !modifier.shift() { "9" } else { shift_state = ""; "(" },
        VirtualKeyCode::Key0 => if !modifier.shift() { "0" } else { shift_state = ""; ")" },
        VirtualKeyCode::A => if !modifier.shift() { "a" } else { shift_state = ""; "A" },
        VirtualKeyCode::B => if !modifier.shift() { "b" } else { shift_state = ""; "B" },
        VirtualKeyCode::C => if !modifier.shift() { "c" } else { shift_state = ""; "C" },
        VirtualKeyCode::D => if !modifier.shift() { "d" } else { shift_state = ""; "D" },
        VirtualKeyCode::E => if !modifier.shift() { "e" } else { shift_state = ""; "E" },
        VirtualKeyCode::F => if !modifier.shift() { "f" } else { shift_state = ""; "F" },
        VirtualKeyCode::G => if !modifier.shift() { "g" } else { shift_state = ""; "G" },
        VirtualKeyCode::H => if !modifier.shift() { "h" } else { shift_state = ""; "H" },
        VirtualKeyCode::I => if !modifier.shift() { "i" } else { shift_state = ""; "I" },
        VirtualKeyCode::J => if !modifier.shift() { "j" } else { shift_state = ""; "J" },
        VirtualKeyCode::K => if !modifier.shift() { "k" } else { shift_state = ""; "K" },
        VirtualKeyCode::L => if !modifier.shift() { "l" } else { shift_state = ""; "L" },
        VirtualKeyCode::M => if !modifier.shift() { "m" } else { shift_state = ""; "M" },
        VirtualKeyCode::N => if !modifier.shift() { "n" } else { shift_state = ""; "N" },
        VirtualKeyCode::O => if !modifier.shift() { "o" } else { shift_state = ""; "O" },
        VirtualKeyCode::P => if !modifier.shift() { "p" } else { shift_state = ""; "P" },
        VirtualKeyCode::Q => if !modifier.shift() { "q" } else { shift_state = ""; "Q" },
        VirtualKeyCode::R => if !modifier.shift() { "r" } else { shift_state = ""; "R" },
        VirtualKeyCode::S => if !modifier.shift() { "s" } else { shift_state = ""; "S" },
        VirtualKeyCode::T => if !modifier.shift() { "t" } else { shift_state = ""; "T" },
        VirtualKeyCode::U => if !modifier.shift() { "u" } else { shift_state = ""; "U" },
        VirtualKeyCode::V => if !modifier.shift() { "v" } else { shift_state = ""; "V" },
        VirtualKeyCode::W => if !modifier.shift() { "w" } else { shift_state = ""; "W" },
        VirtualKeyCode::X => if !modifier.shift() { "x" } else { shift_state = ""; "X" },
        VirtualKeyCode::Y => if !modifier.shift() { "y" } else { shift_state = ""; "Y" },
        VirtualKeyCode::Z => if !modifier.shift() { "z" } else { shift_state = ""; "Z" },
        VirtualKeyCode::Escape => " Esc ",
        VirtualKeyCode::F1 => " F1 ",
        VirtualKeyCode::F2 => " F2 ",
        VirtualKeyCode::F3 => " F3 ",
        VirtualKeyCode::F4 => " F4 ",
        VirtualKeyCode::F5 => " F5 ",
        VirtualKeyCode::F6 => " F6 ",
        VirtualKeyCode::F7 => " F7 ",
        VirtualKeyCode::F8 => " F8 ",
        VirtualKeyCode::F9 => " F9 ",
        VirtualKeyCode::F10 => " F10 ",
        VirtualKeyCode::F11 => " F11 ",
        VirtualKeyCode::F12 => " F12 ",
        VirtualKeyCode::F13 => " F13 ",
        VirtualKeyCode::F14 => " F14 ",
        VirtualKeyCode::F15 => " F15 ",
        VirtualKeyCode::F16 => " F16 ",
        VirtualKeyCode::F17 => " F17 ",
        VirtualKeyCode::F18 => " F18 ",
        VirtualKeyCode::F19 => " F19 ",
        VirtualKeyCode::F20 => " F20 ",
        VirtualKeyCode::F21 => " F21 ",
        VirtualKeyCode::F22 => " F22 ",
        VirtualKeyCode::F23 => " F23 ",
        VirtualKeyCode::F24 => " F24 ",
        VirtualKeyCode::Snapshot => "",
        VirtualKeyCode::Scroll => "",
        VirtualKeyCode::Pause => "",
        VirtualKeyCode::Insert => " Insert ",
        VirtualKeyCode::Home => " Home ",
        VirtualKeyCode::Delete => " Delete ",
        VirtualKeyCode::End => " End ",
        VirtualKeyCode::PageDown => " PageDown ",
        VirtualKeyCode::PageUp => " PageUp ",
        VirtualKeyCode::Left => "←",
        VirtualKeyCode::Up => "↑",
        VirtualKeyCode::Right => "→",
        VirtualKeyCode::Down => "↓",
        VirtualKeyCode::Back => "⌫",
        VirtualKeyCode::Return => "⏎",
        VirtualKeyCode::Space => "␣",
        // VirtualKeyCode::Compose => "",
        // VirtualKeyCode::Caret => "",
        // VirtualKeyCode::Numlock => "",
        // VirtualKeyCode::Numpad0 => "",
        // VirtualKeyCode::Numpad1 => "",
        // VirtualKeyCode::Numpad2 => "",
        // VirtualKeyCode::Numpad3 => "",
        // VirtualKeyCode::Numpad4 => "",
        // VirtualKeyCode::Numpad5 => "",
        // VirtualKeyCode::Numpad6 => "",
        // VirtualKeyCode::Numpad7 => "",
        // VirtualKeyCode::Numpad8 => "",
        // VirtualKeyCode::Numpad9 => "",
        // VirtualKeyCode::AbntC1 => "",
        // VirtualKeyCode::AbntC2 => "",
        // VirtualKeyCode::Add => "+",
        VirtualKeyCode::Apostrophe => if !modifier.shift() { "'" } else { shift_state = ""; "\"" },
        // VirtualKeyCode::Apps => "",
        // VirtualKeyCode::At => "",
        // VirtualKeyCode::Ax => "",
        VirtualKeyCode::Backslash => if !modifier.shift() { "\\" } else { shift_state = ""; "|" },
        // VirtualKeyCode::Calculator => "",
        // VirtualKeyCode::Capital => "",
        // VirtualKeyCode::Colon => ":",
        VirtualKeyCode::Comma => if !modifier.shift() { "," } else { shift_state = ""; "<" },
        // VirtualKeyCode::Convert => "",
        // VirtualKeyCode::Decimal => "",
        // VirtualKeyCode::Divide => "",
        VirtualKeyCode::Equals => if !modifier.shift() { "=" } else { shift_state = ""; "+" },
        VirtualKeyCode::Grave => if !modifier.shift() { "`" } else { shift_state = ""; "~" },
        // VirtualKeyCode::Kana => "",
        // VirtualKeyCode::Kanji => "",
        VirtualKeyCode::LAlt => "",
        VirtualKeyCode::LBracket => if !modifier.shift() { "[" } else { shift_state = ""; "{" },
        VirtualKeyCode::LControl => "",
        VirtualKeyCode::LShift => "",
        VirtualKeyCode::LWin => " Win ",
        // VirtualKeyCode::Mail => "",
        // VirtualKeyCode::MediaSelect => "",
        // VirtualKeyCode::MediaStop => "",
        // VirtualKeyCode::Minus => "-",
        // VirtualKeyCode::Multiply => "",
        // VirtualKeyCode::Mute => "",
        // VirtualKeyCode::MyComputer => "",
        // VirtualKeyCode::NavigateForward => "",
        // VirtualKeyCode::NavigateBackward => "",
        // VirtualKeyCode::NextTrack => "",
        // VirtualKeyCode::NoConvert => "",
        // VirtualKeyCode::NumpadComma => "",
        // VirtualKeyCode::NumpadEnter => "",
        // VirtualKeyCode::NumpadEquals => "",
        // VirtualKeyCode::OEM102 => "",
        VirtualKeyCode::Period => if !modifier.shift() { "." } else { shift_state = ""; ">" },
        // VirtualKeyCode::PlayPause => "",
        // VirtualKeyCode::Power => "",
        // VirtualKeyCode::PrevTrack => "",
        VirtualKeyCode::RAlt => "",
        VirtualKeyCode::RBracket => if !modifier.shift() { "]" } else { shift_state = ""; "}" },
        VirtualKeyCode::RControl => "",
        VirtualKeyCode::RShift => "",
        VirtualKeyCode::RWin => " Win ",
        VirtualKeyCode::Semicolon => if !modifier.shift() { ";" } else { shift_state = ""; ":" },
        VirtualKeyCode::Slash => if !modifier.shift() { "/" } else { shift_state = ""; "?" },
        // VirtualKeyCode::Sleep => "",
        // VirtualKeyCode::Stop => "",
        VirtualKeyCode::Subtract => if !modifier.shift() { "-" } else { shift_state = ""; "_" },
        // VirtualKeyCode::Sysrq => "",
        VirtualKeyCode::Tab => " Tab ",
        // VirtualKeyCode::Underline => "_",
        // VirtualKeyCode::Unlabeled => "",
        // VirtualKeyCode::VolumeDown => "",
        // VirtualKeyCode::VolumeUp => "",
        // VirtualKeyCode::Wake => "",
        // VirtualKeyCode::WebBack => "",
        // VirtualKeyCode::WebFavorites => "",
        // VirtualKeyCode::WebForward => "",
        // VirtualKeyCode::WebHome => "",
        // VirtualKeyCode::WebRefresh => "",
        // VirtualKeyCode::WebSearch => "",
        // VirtualKeyCode::WebStop => "",
        // VirtualKeyCode::Yen => "",
        // VirtualKeyCode::Copy => "",
        // VirtualKeyCode::Paste => "",
        // VirtualKeyCode::Cut => "",
        _ => &key_string,
    };
    let ctrl_state = if modifier.ctrl() { "C-" } else { "" };
    let alt_state = if modifier.alt() { "A-" } else { "" };
    let after_space = if modifier.ctrl() || modifier.alt() || !shift_state.is_empty() { " " } else { "" };
    format!("{}{}{}{}{}", shift_state, ctrl_state, alt_state, key_str, after_space)
}
